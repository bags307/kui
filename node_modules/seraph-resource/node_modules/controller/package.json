{
  "name": "controller",
  "version": "0.6.2",
  "description": "an action controller for express",
  "main": "lib/controller.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec"
  },
  "license": "BSD",
  "devDependencies": {
    "supertest": "~0.1.2",
    "mocha": "*"
  },
  "dependencies": {
    "express": "~3.4.4",
    "underscore": "~1.3.3",
    "methods": "0.0.1"
  },
  "readme": "# controller\na structural aid for creating express routes.\n\n## example\n\nThis code sets up an app with 3 handlers, 4 routes, and some middleware which\napplies to different handler groups.\n\n```javascript\nvar express = require('express');\nvar controller = require('controller');\n\nvar app = express();\nvar users = controller();\n\n// Define handlers\nusers.define('secret-stuff', ['sensitive'], function(req, res) {});\nusers.define('edit-account', ['sensitive'], function(req, res) {});\nusers.define('view-account', function(req, res) {});\n\n// Define middleware for all 'sensitive' grouped handlers\nusers.middleware('sensitive', function(req, res, next) {});\n// Define middleware for all handlers on this controller\nusers.middleware(function(req, res, next) {});\n// Define middleware for 'view-account'\nusers.middleware('view-account', function(req, res, next) {})\n\n// Define routes\nusers.get('/secret-stuff/:id', 'secret-stuff');\nusers.put('/user/edit/:id', 'edit-account');\nusers.get('/user/:id', 'view-account');\nusers.get('/view-user/:id', 'view-account');\n\n// Attach to the app\napp.use(users);\n```\n\n## documentation\n\n* [Usage](#constructor)\n* [Middleware Groups](#groups)\n* [Middleware Ordering](#ordering)\n* [define](#define) - define handlers\n* [middleware](#middleware) - add middleware for handlers\n* [route](#route) - route handlers\n* [direct](#direct) - directly route a handler function\n* [Mounting controllers on controllers & middleware inheritance](#inheritance)\n\n---\n\n<a name=\"constructor\"/>\n### Usage\n\nCreate a new controller by requiring controller and calling it as a function,\nlike this:\n\n```javascript\nvar controller = require('controller');\nvar users = controller();\n```\n\nThen attach it to an instance of express, as if it were middleware:\n\n```javascript\nvar app = require('express')();\napp.use(users);\n\n// It also works to attach it with a route, which will prefix all of the routes \n// in the controller with that path.\n\napp.use('/users/', users);\n```\n\n---\n\n<a name=\"groups\"/>\n### Middleware Groups\n\nController introduces the idea of middleware groups. This allows to you specify\nnamed groups, and apply to middleware to every handler that is labelled with\nthis group. For example, you might have bunch of handlers that require you to \nbe logged in, and some middleware which checks authentication. You could add\nall of the handlers to the 'require-login' group, and then add your auth\nmiddleware to the 'reguire-login' group. This will now apply that middleware to\nevery handler in the group.\n\nIn action:\n```javascript\nvar stuff = controller();\n\n// define handlers with their groups\nstuff.define('sensitive-thing', ['require-login'], function(req,res){});\nstuff.define('secret-thing', ['require-login'], function(req,res){});\n\n// define middleware for the group\nstuff.middleware('require-login', function(req, res, next) {\n  if (isAuthenticated(req)) {\n    next();\n  } else {\n    res.send(403);\n  }\n})\n```\n\n__Special Groups__\n\nThere are some special groups by default. The first one is `all`, which applies\nmiddleware to every action on this controller. Apart from that, every action\nname is also a middleware group, so you can add middleware to individual actions\n\n<a name=\"ordering\"/>\n__Middleware Ordering__\n\nMiddlewares are called in the following order:\n\n1. `'all'` grouped middleware is executed first. (in the order they were added)\n2. all other groups are then executed in the order they were added to the route\n   with `route` or `direct`. within the group, middlewares are executed in the\n   order they were added.\n3. route specific middleware (including middleware added inline on a `define`\n   call) is then executed in the order it was added.\n\nFor example:\n\n```javascript\napp.define('action', ['thing', MIDDLEWARE_1], routestr('str')); // inline middleware\napp.use('thing', MIDDLEWARE_2); // group middleware\napp.use('thing', MIDDLEWARE_3); // group middleware\napp.use(MIDDLEWARE_4); // global middleware\napp.use(MIDDLEWARE_5); // global middleware\napp.use('action', MIDDLEWARE_6); // route specific middleware\napp.use('action', MIDDLEWARE_7); // route specific middleware\napp.route('get', '/action', 'action');\n```\n\nThe call order of middleware in this example would be:\n\n```\n1. MIDDLEWARE_4 (global middleware)\n2. MIDDLEWARE_5 (global middleware)\n3. MIDDLEWARE_2 (group middleware)\n4. MIDDLEWARE_3 (group middleware)\n5. MIDDLEWARE_1 (route-specific middleware)\n6. MIDDLEWARE_6 (route-specific middleware)\n7. MIDDLEWARE_7 (route-specific middleware)\n```\n\n__Special ordering conditions__\n\n* Route names can be group names too. In the previous example, if I was to specify\n  `'action'` as the group for another route, the middleware added for `'action'`—\n  both inline and procedurally—will be called with group precedence, not route-\n  specific precedence. Route-specific precedence only applies to the middleware\n  added specifically for the current route.\n\n<a name=\"define\"/>\n### define(name, [groups], handler)\n\nDefine a handler. A handler is a function that is called as the result of a\nroute being visited. This does not route the handler, it only creates it, ready\nfor routing. \n\n__Parameters__\n* `name` - the name of the handler\n* `middleware/groups` *(optional)* - an array of middleware or groups to add this\n  handler to. Array can contain either strings (middleware group) or functions\n  (inline route-specific middleware) or a mixture of the two. For more details\n  on the order in which these middlewares are called, see the [ordering](#ordering)\n  section.\n* `handler` - the function that is called when the route is visited.\n\n__Example__\n\n```javascript\nusers.define('view', function(req, res) {\n  res.send(Users.read(req.params.id));\n});\n\nusers.define('edit', ['require-login'], function(req, res) {\n  Users.update(req.params.id, req.body);\n  res.send(200);\n});\n```\n\n---\n\n<a name=\"middleware\"/>\n### middleware(group\\*, middleware\\*)\n\nDefine some middleware(s) for a group(s). More than one middleware can be\npassed, as well as more than one group. If you were to pass two groups and two\nmiddlewares, each middleware would be added to both groups.\n\n`group` has some special values. `'all'` indicates that the middleware should\napply to every route on this controller. If you pass the name of an action as\nthe group, the middleware will apply to that action only.\n\n__Paramaters__\n* `group` - defaults to `'all'`\n* `middleware` - middleware to add to `group`.\n\n__Example__\n\n```javascript\nusers.middleware('auth', function checkAuthd(req, res, next) {\n  // check some auth\n});\n\n// Define some middleware for all routes\nusers.middleware(function(res, req, next) {});\n\n// Define some middleware for the 'getUser' action\nusers.middleware('getUser', function(req, res, next) {});\n```\n\n---\n\n<a name=\"route\"/>\n### route(method, path, handlerName)\n\nRoute a handler. Handlers can be routed at more than one location. Just like\nexpress, you can also use this method directly on the controller (see example).\n\n__Parameters__\n* `method`. The http method, for example `'get'`, `'post'`, `'put'`, etc.\n* `path`. The path to route the handler to, in exactly the same format you would\n  pass to express. You can use a regex, but it will ignore `options.prefix`.\n* `handlerName`. The name of the handler to route.\n\n__Example__\n```javascript\nusers.route('get', '/user/:id', 'view');\nusers.route('post', '/user/:id', 'create');\nusers.route('put', '/user/:id', 'edit');\n\n// or directly on the controller\nusers.get('/user/:id', 'view')\nusers.post('/user/:id', 'create');\nusers.delete('/user/:id', 'delete');\n```\n\n---\n\n<a name=\"direct\"/>\n### direct(method, path, [middleware\\*/groups\\*,] handlerfn)\n\nDirectly route a function optionally with some middleware. This is essentially\nthe same as adding a route directly to express. The difference is that handlers\ndefined with `direct` can be included in the controller's middleware groups, and\nwill be included in the `all` group. \n\n__Paramaters__\n* `method`. The http method, for example `'get'`, `'post'`, `'put'`, etc.\n* `path`. The path to route the handler to, in exactly the same format you would\n  pass to express. You can use a regex, but it will ignore `options.prefix`.\n* `middleware/groups`. A bunch of middlewares or groups to add the route to.\n  These can be mixed and matched, Controller will figure it out.\n* `handlerfn`. The handler function to call when the route is visited.\n\n__Example__\n```javascript\nvar uselessMiddleware = function(req,res,next) { next(); };\n\nusers.direct('delete', '/user/:id', uselessMiddleware, 'require-login', function(req, res) {\n  Users.delete(req.params.id);\n  res.end();\n});\n\nusers.direct('get', '/user/do-something', function(req, res) {});\n```\n\n---\n\n<a name=\"inheritance\"/>\n### Mounting controllers on controllers & middleware inheritance\n\nYou can mount a controller on another controller like so:\n\n```javascript\nvar appController = Controller();\nvar usersController = Controller();\n\nappController.use('/users', usersController);\n```\n\nThe path (in this case, `'/users'`) is optional, but it usually makes senses.\n\nMounting controllers on each other in this way will cause middleware inheritance.\nIn our above example, this means that `usersController` will inherit groups and\nmiddlewares from `appController`. If I set a global middleware on `appController`,\n`usersController` will get it too. This means that, for example, if I have a\ngroup `'auth'` on `appController`, I can use it as normal on `usersController`:\n\n```javascript\nusersController.define('editUser', ['auth'], function(req, res) { ... });\nappController.middleware('auth', function(req, res, next) { ... });\n```\n\n##### Middleware ordering when using inheritance\n\nThe run order of middleware is slightly different when utilising inheritance.\nNormally, the global middleware runs first, then the middleware in the order \nspecified on `define`. When utilising inheritance, this is still true, but within\na group, the lowest level of inheritance will run first.\n\nThe easiest way to demonstrate this is to show an example. Lets say we have 3\ncontrollers inheriting from each other, such as this:\n\n```javascript\nusersController.use('/cats', catController);\nappController.use('/users', usersController);\n```\n\nNow, lets say that each of these 3 controllers have one global middleware:\n\n```javascript\nappController.middleware(function(req, res, next) { console.log('app'); next() });\nusersController.middleware(function(req, res, next) { console.log('users'); next() });\ncatController.middleware(function(req, res, next) { console.log('meow'); next() });\n```\n\nLets also say that each of these 3 controllers have one middleware in a group\ncalled `'auth'`.\n\n```javascript\nappController.middleware('auth', function(req, res, next) { console.log('app (auth)'); next() });\nusersController.middleware('auth', function(req, res, next) { console.log('users (auth)'); next() });\ncatController.middleware('auth', function(req, res, next) { console.log('meow (auth)'); next() });\n```\n\nAnd we have a route which consumes these middlewares:\n\n```javascript\ncatController.direct('get', '/meow', ['auth'], function(req, res) {\n  res.end('MEOW');\n});\n```\n\nWhen we send a request to `/users/cats/meow`, the output would be as follows:\n\n```\napp\nusers\nmeow\napp (auth)\nusers (auth)\nmeow (auth)\n```\n\nSo the middleware group order was:\n\n```\nappController [global]\nusersController [global]\nmeowController [global]\nappController [auth]\nusersController [auth]\nmeowController [auth]\n```\n\nThe ordering in which lower levels of middleware are called will not change,\nregardless of the order they are added in.\n",
  "readmeFilename": "README.md",
  "_id": "controller@0.6.2",
  "dist": {
    "shasum": "f0a186280f17a03b4b25fd2f6750d602d00f47af"
  },
  "_from": "controller@^0.6.0",
  "_resolved": "https://registry.npmjs.org/controller/-/controller-0.6.2.tgz"
}
